import proguard.gradle.ProGuardTask

buildscript {
    dependencies {
        classpath 'com.guardsquare:proguard-gradle:7.4.1'
    }
}

plugins {
    id("java")
    id("application")
    id("org.springframework.boot") version "3.1.0"
    id("io.spring.dependency-management") version "1.1.0"
    id("org.jetbrains.kotlin.jvm") version "1.7.22"
    id("org.graalvm.buildtools.native") version "0.9.20"
}

group = "com.zsh"
version = "1.0.0-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_17

repositories {
    maven{
        allowInsecureProtocol = true
        url 'http://maven.aliyun.com/nexus/content/groups/public/'
    }
    mavenCentral()
}

dependencies {
    implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core-jvm:1.6.4")
    implementation('net.mamoe:mirai-core-api:2.16.0')
    implementation('net.mamoe:mirai-logging-slf4j-logback:2.16.0')
    runtimeOnly("net.mamoe:mirai-core:2.16.0")
    implementation("org.springframework.boot:spring-boot-starter-aop")
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation('com.squareup.okhttp3:okhttp:4.10.0')
    implementation("org.apache.commons:commons-lang3")
    implementation 'org.bouncycastle:bcprov-jdk15on:1.68'
    annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
    runtimeOnly("org.springframework.boot:spring-boot-devtools")
    compileOnly("org.projectlombok:lombok")
    annotationProcessor("org.projectlombok:lombok")
    testCompileOnly("org.projectlombok:lombok")
    testAnnotationProcessor("org.projectlombok:lombok")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
}

tasks.withType(Test) {
    systemProperty("spring.profiles.active", "unittest")
    useJUnitPlatform()
}

application {
    mainClass = 'com.zsh.qqbot.QQbotApplication'
    applicationDefaultJvmArgs = [
            '-Dfile.encoding=GBK',
            "-Dspring.profiles.active=prod",
            '-Dspring.config.additional-location=../config/'
    ]
}

// https://github.com/Guardsquare/proguard/blob/7160a9e48490a09f8b1ba92dfbb2c4293c71577a/examples/application/build.gradle
task replaceBatContent(type: Copy) {
    group("distribution")
    def replaceFile = 'build/install/' + getApplicationName() + "/bin/" + getApplicationName() + '.bat'
    def tempFile = 'build/install_temp/' + getApplicationName() + '.bat'
    from(replaceFile)
    into new File(tempFile).parent
    filter { line ->
        line.replaceAll('set CLASSPATH=.*', 'set CLASSPATH=%APP_HOME%\\\\lib\\\\*')
    }
    doLast {
        // add pause for debug
        def tempFileWriter = new FileWriter(tempFile, true)
        tempFileWriter.append('\npause\n')
        tempFileWriter.close()
        copy {
            from(tempFile)
            into new File(replaceFile).parent
        }
    }
}

installDist.finalizedBy replaceBatContent

// proguard 混淆字节码相关任务
// @link https://github.com/Guardsquare/proguard/blob/7160a9e48490a09f8b1ba92dfbb2c4293c71577a/examples/spring-boot/build.gradle
// 混淆jar包名称
ext.baseCoordinates = "${project.name}-${project.version}-plain.jar"
// 混淆文件目录, 完整jar包目录为BOOT-INF下
//ext.proguardDir = "${buildDir}/extracted/BOOT-INF/classes"
ext.proguardDir = "${buildDir}/extracted"
// 解压jar包
task extractJar(type: Copy) {
    group("proguard")
    dependsOn tasks.jar

    doFirst {
        delete "${buildDir}/extracted"
    }

    def zipFile = file("${buildDir}/libs/${baseCoordinates}")
    def outputDir = file("${buildDir}/extracted")

    from zipTree(zipFile)
    into outputDir
}

// 混淆然后打包
task proguard(type: ProGuardTask) {
    group("proguard")
    dependsOn tasks.extractJar

    doFirst {
        // 删除application dev的配置
        delete "${proguardDir}/application-dev.yml"
        delete "${proguardDir}/application-dev.yaml"
        delete "${proguardDir}/application-dev.properties"
    }

    injars  "${proguardDir}"
    outjars "${buildDir}/obfuscatedClasses.jar"

    // Automatically handle the Java version of this build.
    if (System.getProperty('java.version').startsWith('1.')) {
        // Before Java 9, the runtime classes were packaged in a single jar file.
        libraryjars "${System.getProperty('java.home')}/lib/rt.jar"
    } else {
        // As of Java 9, the runtime classes are packaged in modular jmod files.
        libraryjars "${System.getProperty('java.home')}/jmods/java.base.jmod", jarfilter: '!**.jar', filter: '!module-info.class'
        libraryjars "${System.getProperty('java.home')}/jmods/java.desktop.jmod"
    }

    // This will contain the Spring dependencies.
    libraryjars sourceSets.main.compileClasspath

    configuration "proguard.pro"

    printmapping "${buildDir}/mapping.txt"
    // 打印未使用的文件
    printusage "${buildDir}/useless.txt"
}

// 解压混淆后jar包
task copyObfuscatedClasses(type: Copy) {
    group("proguard")
    dependsOn tasks.proguard

    doFirst {
        delete("${proguardDir}")
    }

    from zipTree("${buildDir}/obfuscatedClasses.jar")
    into "${proguardDir}"
}

task repackage(type: Zip) {
    group("proguard")
    dependsOn tasks.copyObfuscatedClasses

    from  "${buildDir}/extracted"
    entryCompression ZipEntryCompression.STORED
    archiveFileName= "${baseCoordinates}"
    destinationDirectory = file("${buildDir}/libs")
}

startScripts.dependsOn repackage
installDist.dependsOn repackage